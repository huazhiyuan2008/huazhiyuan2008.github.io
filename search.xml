<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Android集成React Native实现多Tab页]]></title>
      <url>http://yoursite.com/2016/11/07/Android%E9%9B%86%E6%88%90React%20Native%E5%AE%9E%E7%8E%B0%E5%A4%9ATab%E9%A1%B5/</url>
      <content type="html"><![CDATA[<h2 id="添加依赖配置"><a href="#添加依赖配置" class="headerlink" title="添加依赖配置"></a>添加依赖配置</h2><p>在project build.gradle中添加:</p>
<pre><code>allprojects {
    repositories {
        ...
        maven {
            // All of React Native (JS, Android binaries) is installed from npm
            url &quot;$rootDir/../node_modules/react-native/android&quot;
        }
    }
    ...
}
</code></pre><p>在app build.gradle中添加:</p>
<pre><code>dependencies {
    ...
    compile &quot;com.facebook.react:react-native:+&quot; // From node_modules.
}
</code></pre><p><code>AndroidManifest.xml</code>中添加</p>
<pre><code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;
&lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot;/&gt;

&lt;application&gt;
    ...
    &lt;activity android:name=&quot;com.facebook.react.devsupport.DevSettingsActivity&quot; /&gt;
    ...
&lt;/application&gt;
</code></pre><h2 id="集成ReactApplication"><a href="#集成ReactApplication" class="headerlink" title="集成ReactApplication"></a>集成ReactApplication</h2><p>自定义Application，实现ReactApplication接口</p>
<pre><code>public class MyApplication extends Application implements ReactApplication {

    private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) {

        @Override
        protected boolean getUseDeveloperSupport() {
            return BuildConfig.DEBUG;
        }

 @Override
        protected String getBundleAssetName() {
            return super.getBundleAssetName();
        }

        @Override
        protected String getJSBundleFile() {
            return super.getJSBundleFile();
        }

        @Override
        protected List&lt;ReactPackage&gt; getPackages() {
            return Arrays.asList(
                    new MainReactPackage()
            );
        }
    };

    @Override
    public ReactNativeHost getReactNativeHost() {
        return mReactNativeHost;
    }

}
</code></pre><h2 id="Activity启动RN"><a href="#Activity启动RN" class="headerlink" title="Activity启动RN"></a>Activity启动RN</h2><pre><code>public class MainActivity extends ReactActivity {

    /**
     * Returns the name of the main component registered from JavaScript.
     * This is used to schedule rendering of the component.
     */
    @Override
    protected String getMainComponentName() {
        return &quot;RNSample&quot;;
    }
}
</code></pre><h2 id="Fragment启动RN"><a href="#Fragment启动RN" class="headerlink" title="Fragment启动RN"></a>Fragment启动RN</h2><p>android fragment中包含RN，FaceBook没有实现ReactFragment，需要我们自己实现，代码也很简单</p>
<pre><code>public abstract class ReactFragment extends Fragment {
    private ReactRootView mReactRootView;
    private ReactInstanceManager mReactInstanceManager;

    // This method returns the name of our top-level component to show
    public abstract String getMainComponentName();

    @Override
    public void onAttach(Context context) {
        super.onAttach(context);
        mReactRootView = new ReactRootView(context);
        mReactInstanceManager = ((MyApplication) getActivity().getApplication()).getReactNativeHost().getReactInstanceManager();
    }

    @Override
    public ReactRootView onCreateView(LayoutInflater inflater, ViewGroup group, Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        return mReactRootView;
    }

    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        mReactRootView.startReactApplication(
                mReactInstanceManager,
                getMainComponentName(),
                null
        );
    }
}
</code></pre><p>其他Fragment页面嵌入RN只要继承ReactFragment就行了，如</p>
<pre><code>public class TabAppFragment extends ReactFragment {
    @Override
    public String getMainComponentName() {
        return &quot;TabApp&quot;;
    }
}
</code></pre><h2 id="android显示多个RN页面"><a href="#android显示多个RN页面" class="headerlink" title="android显示多个RN页面"></a>android显示多个RN页面</h2><p>假设有个需求，android页面某几个Tab要用RN来实现，效果如下，怎么做？</p>
<p><img src="http://7xqerh.com1.z0.glb.clouddn.com/fc_2016-11-07-16-05-46.png" alt=""></p>
<p><img src="http://7xqerh.com1.z0.glb.clouddn.com/fc_2016-11-07-16-15-05.png" alt=""></p>
<p><img src="http://7xqerh.com1.z0.glb.clouddn.com/fc_2016-11-07-16-15-23.png" alt=""></p>
<p>很简单，只要定义不同的Fragment就行了</p>
<p>TabAppFragment.java</p>
<pre><code>public class TabAppFragment extends ReactFragment {
    @Override
    public String getMainComponentName() {
        return &quot;TabApp&quot;;
    }
}
</code></pre><p>TabWorkFragment.java</p>
<pre><code>public class TabWorkFragment extends ReactFragment {
    @Override
    public String getMainComponentName() {
        return &quot;TabWork&quot;;
    }
}
</code></pre><p>RN端<code>index.android.js</code> 重点在于<strong>AppRegistry.registerComponent是可以注册多个Component的</strong>，很多人忽略了这个以为RN只有一个入口。</p>
<pre><code>export class TabWork extends Component {
  render() {
    return (
      &lt;View style={styles.container}&gt;
        &lt;Text style={styles.welcome}&gt;
          Welcome to React Native TabWork!
        &lt;/Text&gt;
      &lt;/View&gt;
    );
  }
}


export class TabApp extends Component {
  render() {
    return (
      &lt;View style={styles.container}&gt;
        &lt;Text style={styles.welcome}&gt;
          Welcome to React Native TabApp!
        &lt;/Text&gt;
      &lt;/View&gt;
    );
  }
}

AppRegistry.registerComponent(&#39;TabWork&#39;, () =&gt; TabWork);
AppRegistry.registerComponent(&#39;TabApp&#39;, () =&gt; TabApp);
</code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://facebook.github.io/react-native/docs/integration-with-existing-apps.html" target="_blank" rel="external">https://facebook.github.io/react-native/docs/integration-with-existing-apps.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用RecyclerView实现Gallery画廊效果]]></title>
      <url>http://yoursite.com/2016/09/02/%E4%BD%BF%E7%94%A8RecyclerView%E5%AE%9E%E7%8E%B0Gallery%E7%94%BB%E5%BB%8A%E6%95%88%E6%9E%9C/</url>
      <content type="html"><![CDATA[<p>先贴图<br><img src="http://7xqerh.com1.z0.glb.clouddn.com/RecyclerViewCardGallery_blur.gif" alt=""></p>
<p>要实现上面的画廊效果，传统通过ViewPager clipChildren置为false实现。网上很多教程这个不多说，现在说说用RecyclerView实现上面的效果。这个效果分两步:</p>
<ol>
<li>ViewPager滑动最终居中停止</li>
<li>滑动过程中缩放</li>
</ol>
<a id="more"></a>
<h2 id="ViewPager滑动最终居中停止"><a href="#ViewPager滑动最终居中停止" class="headerlink" title="ViewPager滑动最终居中停止"></a>ViewPager滑动最终居中停止</h2><p><a href="https://developer.android.com/topic/libraries/support-library/features.html#v7-recyclerview" target="_blank" rel="external">Support RecyclerView</a>中增加一个非常重要的类<code>SnapHelper</code>，他的作用是让RecyclerView滑动视图后使停止位置正好停在某页的正中间。使用方式很简单<br>重点在于<code>new LinearSnapHelper().attachToRecyclerView(recyclerView);</code></p>
<pre><code>LinearLayoutManager linearLayoutManager = new LinearLayoutManager(getContext(), LinearLayoutManager.HORIZONTAL, false);
recyclerView.setLayoutManager(linearLayoutManager);

new LinearSnapHelper().attachToRecyclerView(recyclerView);
</code></pre><p>一行代码搞定居中，<a href="http://huazhiyuan2008.github.io/2016/09/01/LinearSnapHelper源码解析/" target="_blank" rel="external">LinearSnapHelper的源码解析查看这里</a>。</p>
<h2 id="滑动过程中缩放"><a href="#滑动过程中缩放" class="headerlink" title="滑动过程中缩放"></a>滑动过程中缩放</h2><p>毫无疑问，RecyclerView的滑动缩放必须要监听RecyclerView的滑动</p>
<pre><code>mRecyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {

    @Override
    public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
        super.onScrolled(recyclerView, dx, dy);
        // dx&gt;0则表示右滑, dx&lt;0表示左滑, dy&lt;0表示上滑, dy&gt;0表示下滑
        mCurrentItemOffset += dx;
        computeCurrentItemPos();
        onScrolledChangedCallback();
    }
});
</code></pre><p>mCurrentItemOffset为滑动总距离，Card每页滑动的距离是固定的，根据这个可以计算出当前显示的位置。缩放看<code>onScrolledChangedCallback</code>这个函数，有了滑动位置就能实时计算滑动某页的百分比<br><code>float percent = (float) Math.max(Math.abs(offset) * 1.0 / mOnePageWidth, 0.0001);</code></p>
<p>得到百分比, 再获取当前位置相邻的视图调用<code>setScaleY</code>函数实现缩放</p>
<pre><code>/**
 * RecyclerView位移事件监听, view大小随位移事件变化
 */
private void onScrolledChangedCallback() {
    int offset = mCurrentItemOffset - mCurrentItemPos * mOnePageWidth;
    float percent = (float) Math.max(Math.abs(offset) * 1.0 / mOnePageWidth, 0.0001);

    View leftView = null;
    View currentView;
    View rightView = null;
    if (mCurrentItemPos &gt; 0) {
        leftView = mRecyclerView.getLayoutManager().findViewByPosition(mCurrentItemPos - 1);
    }
    currentView = mRecyclerView.getLayoutManager().findViewByPosition(mCurrentItemPos);
    if (mCurrentItemPos &lt; mRecyclerView.getAdapter().getItemCount() - 1) {
        rightView = mRecyclerView.getLayoutManager().findViewByPosition(mCurrentItemPos + 1);
    }

    if (leftView != null) {
        // y = (1 - mScale)x + mScale
        leftView.setScaleY((1 - mScale) * percent + mScale);
    }
    if (currentView != null) {
        // y = (mScale - 1)x + 1
        currentView.setScaleY((mScale - 1) * percent + 1);
    }
    if (rightView != null) {
        // y = (1 - mScale)x + mScale
        rightView.setScaleY((1 - mScale) * percent + mScale);
    }
}
</code></pre><h2 id="完整代码下载"><a href="#完整代码下载" class="headerlink" title="完整代码下载"></a>完整代码下载</h2><p><a href="https://github.com/huazhiyuan2008/RecyclerViewCardGallery" target="_blank" rel="external">https://github.com/huazhiyuan2008/RecyclerViewCardGallery</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LinearSnapHelper源码解析]]></title>
      <url>http://yoursite.com/2016/09/01/LinearSnapHelper%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>Google最新发布的<a href="https://developer.android.com/topic/libraries/support-library/features.html#v7-recyclerview" target="_blank" rel="external">Support RecyclerView</a>包更新到24.2.0，这次来聊聊RecyclerView的<a href="https://developer.android.com/topic/libraries/support-library/revisions.html#24-2-0-api-updates" target="_blank" rel="external">新特性</a>和SnapHelper的关系。</p>
<p>一句话介绍<a href="https://developer.android.com/reference/android/support/v7/widget/SnapHelper.html" target="_blank" rel="external">SnapHelper</a>: SnapHelper是RecyclerView功能的一种拓展，使RecyclerView滑动行为类似ViewPager，无论怎么滑动最终停留在某页正中间。ViewPager一次只能滑动一页，RecyclerView+SnapHelper方式可以一次滑动好几页，且最终都停留在某页正中间。非常实用和酷炫。<br>SnapHelper的实现原理是监听RecyclerView.OnFlingListener中的onFling接口。<code>LinearSnapHelper</code>是抽象类SnapHelper的具体实现。</p>
<p><img src="http://7xqerh.com1.z0.glb.clouddn.com/SnapHelper.gif" alt=""></p>
<a id="more"></a>
<p>上面的效果只需下面几行代码即可。重点在于<code>new LinearSnapHelper().attachToRecyclerView(recyclerView);</code></p>
<pre><code>LinearLayoutManager linearLayoutManager = new LinearLayoutManager(getContext(), LinearLayoutManager.HORIZONTAL, false);
recyclerView.setLayoutManager(linearLayoutManager);

new LinearSnapHelper().attachToRecyclerView(recyclerView);
</code></pre><p>接下来具体分析<strong>LinearSnapHelper是怎么实现类似ViewPager的功能的</strong></p>
<h3 id="attachToRecyclerView，居中处理分析"><a href="#attachToRecyclerView，居中处理分析" class="headerlink" title="attachToRecyclerView，居中处理分析"></a><strong>attachToRecyclerView，居中处理分析</strong></h3><pre><code>
public void attachToRecyclerView(@Nullable RecyclerView recyclerView) throws IllegalStateException {

   ...

   snapToTargetExistingView();

   ...

}

/**

 * 1. 找到居中显示的View

 * 2. 计算view离当前的位置距离, 调用mRecyclerView.smoothScrollBy使其居中

 */

private void snapToTargetExistingView() {

    View snapView = findSnapView(layoutManager);

    int[] snapDistance = calculateDistanceToFinalSnap(layoutManager, snapView);

    if (snapDistance[0] != 0 || snapDistance[1] != 0) {

        mRecyclerView.smoothScrollBy(snapDistance[0], snapDistance[1]);

    }

}

/**

 * 1. 找到当前RecyclerView的居中位置center

 * 2. 循环遍历子节点，找出子节点居中位置最接近center的视图，及SnapView

 */

public View findSnapView(RecyclerView.LayoutManager layoutManager) {

    ...

}

/**

 * 计算到targetView要移动的距离

 */

@Override

public int[] calculateDistanceToFinalSnap(

        @NonNull RecyclerView.LayoutManager layoutManager, @NonNull View targetView) {

      ... 

}
</code></pre><h3 id="RecyclerView-OnFling，滑动后停止到居中位置分析"><a href="#RecyclerView-OnFling，滑动后停止到居中位置分析" class="headerlink" title="RecyclerView.OnFling，滑动后停止到居中位置分析"></a><strong>RecyclerView.OnFling，滑动后停止到居中位置分析</strong></h3><p>SnapHelper extends RecyclerView.OnFlingListener，重载onFling函数</p>
<pre><code>
public boolean onFling(int velocityX, int velocityY) {

    LayoutManager layoutManager = mRecyclerView.getLayoutManager();

    if (layoutManager == null) {

        return false;

    }

    RecyclerView.Adapter adapter = mRecyclerView.getAdapter();

    if (adapter == null) {

        return false;

    }

    int minFlingVelocity = mRecyclerView.getMinFlingVelocity();

    return (Math.abs(velocityY) &gt; minFlingVelocity || Math.abs(velocityX) &gt; minFlingVelocity)

            &amp;&amp; snapFromFling(layoutManager, velocityX, velocityY);

}

/**

 * 同样的套路，先根据移动速度确定最终位置，然后startSmoothScroll

 */

private boolean snapFromFling(@NonNull LayoutManager layoutManager, int velocityX,

        int velocityY) {

    ...

    int targetPosition = findTargetSnapPosition(layoutManager, velocityX, velocityY);

    if (targetPosition == RecyclerView.NO_POSITION) {

        return false;

    }

    smoothScroller.setTargetPosition(targetPosition);

    layoutManager.startSmoothScroll(smoothScroller);

    return true;

}
</code></pre><h2 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h2><p><a href="https://github.com/huazhiyuan2008/RecyclerViewCardGallery" target="_blank" rel="external">https://github.com/huazhiyuan2008/RecyclerViewCardGallery</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ViewPager卡顿优化实战]]></title>
      <url>http://yoursite.com/2016/08/15/ViewPager%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/</url>
      <content type="html"><![CDATA[<p>应用UI卡顿常见原因主要在以下几个方面：</p>
<ol>
<li><p>人为在UI线程中做轻微耗时操作，导致UI线程卡顿；</p>
</li>
<li><p>布局Layout过于复杂，无法在16ms内完成渲染；</p>
</li>
<li><p>同一时间动画执行的次数过多，导致CPU或GPU负载过重；</p>
</li>
<li><p>View过度绘制，导致某些像素在同一帧时间内被绘制多次，从而使CPU或GPU负载过重；</p>
</li>
<li><p>View频繁的触发measure、layout，导致measure、layout累计耗时过多及整个View频繁的重新渲染；</p>
</li>
<li><p>内存频繁触发GC过多（同一帧中频繁创建内存），导致暂时阻塞渲染操作；</p>
</li>
<li><p>冗余资源及逻辑等导致加载和执行缓慢；</p>
</li>
</ol>
<a id="more"></a>
<h2 id="发现和定位问题，及解决方案"><a href="#发现和定位问题，及解决方案" class="headerlink" title="发现和定位问题，及解决方案"></a>发现和定位问题，及解决方案</h2><p>打开GPU绘制，手指在卡片上来回滑来滑去，通过观察高线的位置判断卡顿的时机，我们发现滑动停止后再一次滑动时出现高峰，如图，按照经验ViewPager的卡顿问题在于滑动事件的回调，重点排查<code>onPageScrolled</code>，<code>onPageSelected</code>及<code>Adapter</code>的<code>instantiateItem</code>方法。</p>
<p><img src="http://7xqerh.com1.z0.glb.clouddn.com/opt_lesson_card_before.jpg" width="300px" alert="http://7xqerh.com1.z0.glb.clouddn.com/opt_lesson_card_before.jpg?imageView2/2/h/500"></p>
<p>为了更精确的定位耗时方法，可以使用TraceView。打开DDMS，进入下面界面</p>
<p><img src="http://7xqerh.com1.z0.glb.clouddn.com/opt_open_traceview.png" alt=""></p>
<p>点击红点位置开始录制，滑动手机屏幕，一段时间后再点击红点停止录制。分析下面的图</p>
<p><img src="http://7xqerh.com1.z0.glb.clouddn.com/opt_traceview2.png" alt=""></p>
<p><img src="http://7xqerh.com1.z0.glb.clouddn.com/opt_traceview.png" alt=""></p>
<p>可以看到耗时最多的两个方法，RoundAngleImageView的draw方法和CardAdapter的instantiateItem方法。我们通过打log也应证了TraceView的判断，<strong>ViewPager滑动过程中RoundAngleImageView会不断绘制</strong>，在滑动停顿后又开始滑动得时候出现耗时峰值。优化的方案就是用RoundedImageView替换掉自定义的RoundAngleImageView，RoundedImageView使用BitmapShader方式优于RoundAngleImageView使用的PorterDuffXfermode圆角方案。特别在不断绘制的情况下，效果较明显。</p>
<p><img src="http://7xqerh.com1.z0.glb.clouddn.com/opt_round_angle_imageview.png" alt=""></p>
<p>接下来分析CardAdapter的instantiateItem方法，同样先看log，定位更细的方法</p>
<p><img src="http://7xqerh.com1.z0.glb.clouddn.com/opt_instantiateItem1.png" alt=""></p>
<p><img src="http://7xqerh.com1.z0.glb.clouddn.com/opt_instantiateItem_log.png" alt=""></p>
<p>通过日志看出<code>val view = LayoutInflater.from(container.context).inflate(R.layout.``item_lesson_card``, container, false) as LessonCardView</code>和<code>initLessonCardView(position, view, cardList)</code>两个方法。</p>
<p>inflate方法可做的优化就是减少View层级，把最外层的RelativeLayout替换成LinearLayout。另外一个优化就是把 <code>initLessonCardView</code>方法加入延时，对于当前显示的item延时为0，不可见的item延时时间与当前View的位置步距依次延长。通过分步延时避免UI线程一直被占用。</p>
<p><img src="http://7xqerh.com1.z0.glb.clouddn.com/opt_instantiateItem2.png" alt=""></p>
<p>下面来跟踪<code>initLessonCardView</code>方法</p>
<p><img src="http://7xqerh.com1.z0.glb.clouddn.com/opt_addview.png" alt=""></p>
<p><img src="http://7xqerh.com1.z0.glb.clouddn.com/opt_addview_log.png" alt=""></p>
<p>通过日志发现耗时最大的在于View的构造函数。</p>
<pre><code>val exerciseItemView: ExerciseItemView = ExerciseItemView(context)
</code></pre><p>尝试把View的创建方法改成<code>inflate</code>方式，事实证明然并卵。</p>
<pre><code>val exerciseItemView: ExerciseItemView = View.inflate(context, R.layout.view_exercise_item, null) as ExerciseItemView
</code></pre><h2 id="优化后的图"><a href="#优化后的图" class="headerlink" title="优化后的图"></a>优化后的图</h2><p>左边是优化后的图，右边是某竞品的图，比较下很明显看出渲染的差异来</p>
<p><img src="http://7xqerh.com1.z0.glb.clouddn.com/opt_lesson_card_after.jpg" width="300px"><br><img src="http://7xqerh.com1.z0.glb.clouddn.com/opt_lesson_card_lls.jpg" width="300px"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>优化到此为止，总结一下View的优化套路。首先发现问题，通过GPU柱状图判断卡顿程度。然后通过TraceView定位卡顿的方法，打log方式找到更具体的耗时细节，然后逐个优化。</p>
<p>本次ViewPager的优化包括：</p>
<ul>
<li><p><code>RoundedImageView</code>控件的选择，选择更高效的圆角方案</p>
</li>
<li><p>优化view的层次结构，尽量减少层级，同样层级情况使用<code>LinearLayout</code>优于<code>RelativeLayout</code></p>
</li>
<li><p><code>adapter instantiateItem</code>分布延迟渲染</p>
</li>
</ul>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>ViewPager里包含ListView时，<code>layout_height</code>属性为<code>wrap_content</code>会导致<code>adapter getView</code>不断被调用，建议改成<code>match_content</code></p>
<pre><code>&lt;ListView 
    android:layout_width=&quot;match_parent&quot; 
    android:layout_height=&quot;wrap_content&quot; /&gt;
</code></pre>]]></content>
    </entry>
    
  
  
</search>
