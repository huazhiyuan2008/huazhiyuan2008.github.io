<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[ViewPager卡顿优化实战]]></title>
      <url>http://yoursite.com/2016/08/15/ViewPager%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/</url>
      <content type="html"><![CDATA[<p>应用UI卡顿常见原因主要在以下几个方面：</p>
<p>1.人为在UI线程中做轻微耗时操作，导致UI线程卡顿；</p>
<p>2.布局Layout过于复杂，无法在16ms内完成渲染；</p>
<p>3.同一时间动画执行的次数过多，导致CPU或GPU负载过重；</p>
<p>4.View过度绘制，导致某些像素在同一帧时间内被绘制多次，从而使CPU或GPU负载过重；</p>
<p>5.View频繁的触发measure、layout，导致measure、layout累计耗时过多及整个View频繁的重新渲染；</p>
<p>6.内存频繁触发GC过多（同一帧中频繁创建内存），导致暂时阻塞渲染操作；</p>
<p>7.冗余资源及逻辑等导致加载和执行缓慢；</p>
<a id="more"></a>
<h2 id="发现和定位问题，及解决方案"><a href="#发现和定位问题，及解决方案" class="headerlink" title="发现和定位问题，及解决方案"></a>发现和定位问题，及解决方案</h2><p>打开GPU绘制，手指在卡片上来回滑来滑去，通过观察高线的位置判断卡顿的时机，我们发现滑动停止后再一次滑动时出现高峰，如图，按照经验ViewPager的卡顿问题在于滑动事件的回调，重点排查<code>onPageScrolled</code>，<code>onPageSelected</code>及<code>Adapter</code>的<code>instantiateItem</code>方法。</p>
<p><img src="http://7xqerh.com1.z0.glb.clouddn.com/opt_lesson_card_before.jpg" width="300px" alert="http://7xqerh.com1.z0.glb.clouddn.com/opt_lesson_card_before.jpg?imageView2/2/h/500"></p>
<p>为了更精确的定位耗时方法，可以使用TraceView。打开DDMS，进入下面界面</p>
<p><img src="http://7xqerh.com1.z0.glb.clouddn.com/opt_open_traceview.png" alt=""></p>
<p>点击红点位置开始录制，滑动手机屏幕，一段时间后再点击红点停止录制。分析下面的图</p>
<p><img src="http://7xqerh.com1.z0.glb.clouddn.com/opt_traceview2.png" alt=""></p>
<p><img src="http://7xqerh.com1.z0.glb.clouddn.com/opt_traceview.png" alt=""></p>
<p>可以看到耗时最多的两个方法，RoundAngleImageView的draw方法和CardAdapter的instantiateItem方法。我们通过打log也应证了TraceView的判断，<strong>ViewPager滑动过程中RoundAngleImageView会不断绘制</strong>，在滑动停顿后又开始滑动得时候出现耗时峰值。优化的方案就是用RoundedImageView替换掉自定义的RoundAngleImageView，RoundedImageView使用BitmapShader方式优于RoundAngleImageView使用的PorterDuffXfermode圆角方案。特别在不断绘制的情况下，效果较明显。</p>
<p><img src="http://7xqerh.com1.z0.glb.clouddn.com/opt_round_angle_imageview.png" alt=""></p>
<p>接下来分析CardAdapter的instantiateItem方法，同样先看log，定位更细的方法</p>
<p><img src="http://7xqerh.com1.z0.glb.clouddn.com/opt_instantiateItem1.png" alt=""></p>
<p><img src="http://7xqerh.com1.z0.glb.clouddn.com/opt_instantiateItem_log.png" alt=""></p>
<p>通过日志看出<code>val view = LayoutInflater.from(container.context).inflate(R.layout.``item_lesson_card``, container, false) as LessonCardView</code>和<code>initLessonCardView(position, view, cardList)</code>两个方法。</p>
<p>inflate方法可做的优化就是减少View层级，把最外层的RelativeLayout替换成LinearLayout。另外一个优化就是把 <code>initLessonCardView</code>方法加入延时，对于当前显示的item延时为0，不可见的item延时时间与当前View的位置步距依次延长。通过分步延时避免UI线程一直被占用。</p>
<p><img src="http://7xqerh.com1.z0.glb.clouddn.com/opt_instantiateItem2.png" alt=""></p>
<p>下面来跟踪<code>initLessonCardView</code>方法</p>
<p><img src="http://7xqerh.com1.z0.glb.clouddn.com/opt_addview.png" alt=""></p>
<p><img src="http://7xqerh.com1.z0.glb.clouddn.com/opt_addview_log.png" alt=""></p>
<p>通过日志发现耗时最大的在于View的构造函数。</p>
<pre><code>val exerciseItemView: ExerciseItemView = ExerciseItemView(context)
</code></pre><p>尝试把View的创建方法改成<code>inflate</code>方式，事实证明然并卵。</p>
<pre><code>val exerciseItemView: ExerciseItemView = View.inflate(context, R.layout.view_exercise_item, null) as ExerciseItemView
</code></pre><h2 id="优化后的图"><a href="#优化后的图" class="headerlink" title="优化后的图"></a>优化后的图</h2><p>左边是优化后的图，右边是某竞品的图，比较下很明显看出渲染的差异来</p>
<p><img src="http://7xqerh.com1.z0.glb.clouddn.com/opt_lesson_card_after.jpg" width="300px"><br><img src="http://7xqerh.com1.z0.glb.clouddn.com/opt_lesson_card_lls.jpg" width="300px"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>优化到此为止，总结一下View的优化套路。首先发现问题，通过GPU柱状图判断卡顿程度。然后通过TraceView定位卡顿的方法，打log方式找到更具体的耗时细节，然后逐个优化。</p>
<p>本次ViewPager的优化包括：</p>
<ul>
<li><p><code>RoundedImageView</code>控件的选择，选择更高效的圆角方案</p>
</li>
<li><p>优化view的层次结构，尽量减少层级，同样层级情况使用<code>LinearLayout</code>优于<code>RelativeLayout</code></p>
</li>
<li><p><code>adapter instantiateItem</code>分布延迟渲染</p>
</li>
</ul>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>ViewPager里包含ListView时，<code>layout_height</code>属性为<code>wrap_content</code>会导致<code>adapter getView</code>不断被调用，建议改成<code>match_content</code></p>
<pre><code>&lt;ListView 
    android:layout_width=&quot;match_parent&quot; 
    android:layout_height=&quot;wrap_content&quot; /&gt;
</code></pre>]]></content>
    </entry>
    
  
  
</search>
